#### Exception Handelling....
===========================================================================================================

==> Exception is an abnormal condition.
==> In java exception is an event that disturbs the normal flow of the program.

Exception:- 
============================================================================================================

==> During the execution of the java program jvm faces abnormal situations based on code declaration.
==> If java faces abnormal situation then java triggers an event and that event is called as exception.
==> If exception event occurs in java program then it results in termination of java program.

Exception Handelling:- 
=============================================================================================================

==> Handelling the event generated by jvm during program execution is known as exception handelling.
==> To Handle the exception  in java we can use try catch block or can use keyword throw/throws.

Try/Catch/Finally Block:- 
=============================================================================================================

Try:- It is used to declare risky code only. controller visits inside the try block only once throughout the lifetime of the program.
      Try block should be followed by either catch block or finallly block.

Catch:- It is used to handle event generated by try block. Catch block will be executed only if event generated in try block.
	Any number of catch blocks can be written for the single try block.

Finally:- Finally is a block used to close the costly resources of current program. Finally block should be followed by catch block.
	  Finally block can be declared after try block but it is not recomended.
	  Finally block is opional block.It will execute compulsory if we write it.
	
	ex.  1. Exception Does not occur
	     2. Exception occurs and not handled.
	     3. Exception occurs and handled.

Types of Exception:- 
================================================================================================================

==> There are two major types of exception.
	1. Checked Exception
	2. Unchecked Exception.

1. Checked Exception:- The Exceptions identified by the compiler at the time of code writing only. 
			(Ex. InterruptedException, IOEException, FileNotFoundException)
2. Unchecked Exception:- The Exceptions which are not identified by the compiler at the time of code writing. They will occur at  the time of running.
			(Ex. Arithmatic Exception, NullpointerException, NumberformatException, ArrayoutofBoundException)
 	  


Exception in Selenium:- 
====================================================================================================================

1. Webdriver Exception:- When Url is not found or when it is not well formed we will get this exception.
2. NoAleartPresent Exception:- If you try to perform the action on other popup except aleart popup using the aleart interface then we will get this exception.
3. UnhandledAlert Exception:-  If you try to perform action on browser without handelling aleart popup then we will get this exception.
4. UnExpectedTagName Exception:- If we try to handle customized list box using select class then we will get this issue.
5. NotConnected Exception:-  When Selenium jar files are unable to intract with browser then we will get this exception.
6. InvalidElementState Exception:- If we try to handle disable element then we will get this exception.
7. NoSuchElement Exception:- This exception will occur if xpath is wrong or there is synchronization issue due to selenium waits.
8. UnreachableBrowser Exception:- When we intrupt the browser while ruuning the script then we will get such exception.

Final- Finally- Finalize
=====================================================================================================================

Final:- Final is a keyword can be use before variable, method, class so that we can not reinitialize it, redefine it or extend it.
Finally:- This block is used in combination with try catch block. This is executed always once declared. This is used to handle costly resources.
Finalize():- This is method used by JVM  in garbage collector to  free up the memory.

 	
Difference Throw and Throws Keyword.
=======================================================================================================================

Throw:- Throw is a keyword used  to throw new customed exception in class. (User Generated Exception)
Throws:- Throws is a keyword used to declare type of exception generated inside the method or class. (Default Exceptions)



## Program 1:- 
==========================================================================================================================
public class ExceptionHandelling {

	public static void main(String[] args)  {
		
		// checked Exception.
		
		// Example 1
		try {   
			 // we will write the risky code.
			Thread.sleep(2000);
		} catch (Exception e) {  // what error is occured. and we can also provide the aleternative solution if possible.
			e.printStackTrace();
		}
		
		// Example 2
			try {
				FileInputStream file = new FileInputStream("C:\\Users\\DELL\\Automation_Test.xlsx");
				String data = WorkbookFactory.create(file).getSheet("Sheet1").getRow(0).getCell(0).getStringCellValue();
				System.out.println(data);
			}catch (Exception e) {  
				e.printStackTrace();
			}
	}
}


## Program 2:- 
==========================================================================================================================

public class UncheckedExceptions {

public static void main(String[] args) {
		
		System.out.println("Entered int the Class");
		System.out.println("Entered int the Main Method");
		
		// uncheked exception.
		
		// Example 1:-  Arithmatic Exception
		//		int a =50;
		//		try {
		//		System.out.println(a/0);
		//		}catch (Exception e) {  
		//			e.printStackTrace();
		//		}
		
		// Example 2:-  NullPointer Exception
		//		String s= null;
		//		try {
		//		System.out.println(s.length());
		//		}catch(Exception e) {
		//			e.printStackTrace();
		//		}
		
		// Example 3:-  Numberformat Exception
		
		//		String a="1583";
		//		try {
		//		int i = Integer.parseInt(a);
		//		System.out.println(i);
		//		}catch(ArithmeticException e) {
		//			e.printStackTrace();
		//		}catch(Exception e) {
		//			e.printStackTrace();
		//		}
		
		// Example 4:-  ArrayoutofBound Exception
		
		//		int a[] = new int[5];
		//		a[10]= 500;
		
		System.out.println("exist from the Main Method");
		System.out.println("exist from the Class");
	}
}



